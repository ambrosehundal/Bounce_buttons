// **** Include libraries here ****
// Standard libraries

//CMPE13 Support Library
#include "BOARD.h"

// Microchip libraries
#include <xc.h>
#include <plib.h>

// User libraries
#include "Leds.h"
// **** Set macros and preprocessor directives ****
#define LEFT 1
#define RIGHT 0
// **** Declare any datatypes here ****

typedef struct TimerResult {
    uint8_t event;
    uint8_t value;
} TimerResult;
// **** Define global, module-level, or external variables here ****
static struct TimerResult Timer;
// **** Declare function prototypes ****

int main(void) {
    BOARD_Init();

    // Configure Timer 1 using PBCLK as input. This default period will make the LEDs blink at a
    // pretty reasonable rate to start.
    OpenTimer1(T1_ON | T1_SOURCE_INT | T1_PS_1_8, 0xFFFF);

    // Set up the timer interrupt with a priority of 4.
    INTClearFlag(INT_T1);
    INTSetVectorPriority(INT_TIMER_1_VECTOR, INT_PRIORITY_LEVEL_4);
    INTSetVectorSubPriority(INT_TIMER_1_VECTOR, INT_SUB_PRIORITY_LEVEL_0);
    INTEnable(INT_T1, INT_ENABLED);

    /***************************************************************************************************
     * Your code goes in between this comment and the following one with asterisks.
     **************************************************************************************************/
    LEDS_INIT();
    int direction = LEFT; // initialize direction of LEDs
    int led = 0x01; //set value to first LED

    while (1) {
        LEDS_SET(led);
        if (Timer.event == TRUE) {
            if (led == 0x80) { //if it's at last LED
                direction = RIGHT; //reverse direction
                led = led >> 1; //trigger previous LED
            } else {
                if (direction == RIGHT && led != 0x01) { //if going right and havent reached LD1
                    led = led >> 1;
                } else {
                    direction = LEFT;
                    led = led << 1;
                }
            }
            Timer.event = FALSE; //reset event flag
        }
    }
    /***************************************************************************************************
     * Your code goes in between this comment and the preceding one with asterisks
     **************************************************************************************************/

    while (1);
}

/**
 * This is the interrupt for the Timer1 peripheral. During each call it increments a counter (the
 * value member of a module-level TimerResult struct). This counter is then checked against the
 * binary values of the four switches on the I/O Shield (where SW1 has a value of 1, SW2 has a value
 * of 2, etc.). If the current counter is greater than this switch value, then the event member of a
 * module-level TimerResult struct is set to true and the value member is cleared.
 */
void __ISR(_TIMER_1_VECTOR, IPL4AUTO) Timer1Handler(void) {
    // Clear the interrupt flag.
    INTClearFlag(INT_T1);
    Timer.value++;
    if ((Timer.value) > SWITCH_STATES()) {
        Timer.event = TRUE; //sets event to true
        Timer.value = 0; //resets value
    }
}


